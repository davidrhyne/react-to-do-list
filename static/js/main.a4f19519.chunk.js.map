{"version":3,"sources":["components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["Todo","todo","toggleTodo","type","checked","isCompleted","onChange","id","name","TodoList","todos","className","map","App","useState","setTodos","todoNameRef","useRef","LOCAL_STORAGE_KEY","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","ref","placeholder","onClick","currentTodos","filter","e","newTodo","current","value","prevTodos","uuidv4","find","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAEe,SAASA,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAIjC,OACI,8BACI,kCACI,uBACIC,KAAK,WACLC,QAASH,EAAKI,YACdC,SAThB,WACIJ,EAAWD,EAAKM,OAUHN,EAAKO,UCVX,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,WACtC,OACI,qBAAKS,UAAU,YAAf,SACKD,EAAME,KAAI,SAAAX,GACP,OAAO,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,WAAYA,GAAjCD,EAAKM,S,kBC4DxBM,MA/Df,WAEE,MAA4BC,mBAAS,IAArC,mBAAQJ,EAAR,KAAeK,EAAf,KACMC,EAAcC,mBACdC,EAAoB,iBA8C1B,OA3CAC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAOC,aAAaC,QAAQN,IACjDE,GAAaL,EAASK,KAC1B,IAGFD,qBAAU,WACRI,aAAaE,QAAQP,EAAmBG,KAAKK,UAAUhB,MACvD,CAACA,IAoCD,sBAAKC,UAAU,YAAf,UACE,yDAEA,uBAAOgB,IAAKX,EAAab,KAAK,OAAOyB,YAAY,iCACjD,wBAAQjB,UAAU,QAAQkB,QAV9B,WACE,IAAMC,EAAepB,EAAMqB,QAAO,SAAA9B,GAAI,OAAKA,EAAKI,eAChDU,EAASe,IAQP,oCACA,wBAAQnB,UAAU,MAAMkB,QA1B5B,SAAuBG,GAErB,IAAMC,EAAUjB,EAAYkB,QAAQC,MAEpB,KAAZF,IAGJlB,GAAS,SAAAqB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAC7B,GAAG8B,cAAU7B,KAAMyB,EAAS5B,aAAa,QAIlEW,EAAYkB,QAAQC,MAAQ,OAc1B,2BACA,cAAC1B,EAAD,CAAUC,MAAOA,EAAOR,WAvC5B,SAAoBK,GAElB,IAAMuB,EAAY,YAAOpB,GAEnBT,EAAO6B,EAAaQ,MAAK,SAAArC,GAAI,OAAIA,EAAKM,KAAOA,KAEnDN,EAAKI,aAAeJ,EAAKI,YAEzBU,EAASe,MAgCP,sBAAKnB,UAAU,aAAf,UAA6BD,EAAMqB,QAAO,SAAA9B,GAAI,OAAKA,EAAKI,eAAakC,OAArE,6BCzDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a4f19519.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Todo({ todo, toggleTodo }) {\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input \r\n                    type=\"checkbox\" \r\n                    checked={todo.isCompleted} \r\n                    onChange={handleTodoClick}\r\n                    />\r\n                    {todo.name}\r\n            </label>            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './todoList.css'\r\nimport Todo from '../Todo/Todo'\r\n\r\nexport default function TodoList({ todos, toggleTodo }) {\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {todos.map(todo => {\r\n                return <Todo key={todo.id} todo={todo} toggleTodo={toggleTodo} />\r\n            })}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\nimport TodoList from './components/TodoList/TodoList'\nimport './App.css'; \nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n  // create state for the application\n  const [ todos, setTodos ] = useState([])\n  const todoNameRef = useRef();\n  const LOCAL_STORAGE_KEY = 'todosApp.todos'\n\n  // load any existing to dos from local storage on load\n  useEffect(() => {\n    const storedTodos = JSON.parse( localStorage.getItem(LOCAL_STORAGE_KEY))\n    if (storedTodos) setTodos(storedTodos)\n  },[])\n\n  // save any changes to to do's to local storage\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  },[todos])\n\n  // toggle isCompleted on given to do\n  function toggleTodo(id) {\n    // get copy of existing to dos\n    const currentTodos = [...todos]\n    // find the to do to update\n    const todo = currentTodos.find(todo => todo.id === id)\n    // change value of isComplete to opposite\n    todo.isCompleted = !todo.isCompleted\n    // overwrite existing to dos with updated copy\n    setTodos(currentTodos)\n  }\n\n  // add new to do to list\n  function handleAddTodo(e) {\n    // get value from input field\n    const newTodo = todoNameRef.current.value\n    // if field is empty, then exit function\n    if (newTodo === '') return \n    \n    // add new record to array, after existing to dos, uuidv4 is unique id\n    setTodos(prevTodos => {\n      return [...prevTodos, {id:uuidv4(), name: newTodo, isCompleted: false}]\n    })\n\n    // clear to do input after adding \n    todoNameRef.current.value = null\n  }\n\n  function handleClearTodos() {\n    const currentTodos = todos.filter(todo => !todo.isCompleted)\n    setTodos(currentTodos)\n  }\n\n  return (\n    <div className=\"container\">\n      <h3>The Official To Do List</h3>      \n      \n      <input ref={todoNameRef} type=\"text\" placeholder=\"add new item to do item here\"/>\n      <button className=\"clear\" onClick={handleClearTodos}>Clear Complete To Do's</button>\n      <button className=\"add\" onClick={handleAddTodo}>Add New To Do</button>      \n      <TodoList todos={todos} toggleTodo={toggleTodo}/>\n      <div className=\"unfinished\">{todos.filter(todo => !todo.isCompleted).length} unfinished to do's</div>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  // optional\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}